# 
# Export functions:
#	build_pump_library()
#

MACRO(build_pump_library)
	set_complie_flags(${LIB_COMPILE_FLAGS})

	FILE(GLOB_RECURSE LIB_SOURCES ${ROOT_DIR}/src/*.cpp)
	FILE(GLOB_RECURSE LIB_HEADERS ${ROOT_DIR}/include/pump/*.h)
	SET(LIB_ALL_FILES ${LIB_SOURCES} ${LIB_HEADERS})

	IF(WIN32)
		FOREACH(FILE_NAME ${LIB_ALL_FILES})
			IF("${FILE_NAME}" MATCHES ".cpp")
				FILE(RELATIVE_PATH REL_FILE_NAME "${ROOT_DIR}/src" ${FILE_NAME})
			ELSE("${FILE_NAME}" MATCHES ".h")
				FILE(RELATIVE_PATH REL_FILE_NAME "${ROOT_DIR}/include/pump" ${FILE_NAME})
			ENDIF()
			GET_FILENAME_COMPONENT(REL_FILE_PATH ${REL_FILE_NAME} DIRECTORY)
			IF("${REL_FILE_PATH}" STREQUAL "")
				SOURCE_GROUP("" FILES ${FILE_NAME})
			ELSE()
				STRING(REPLACE "/" "\\" REL_FILE_PATH "${REL_FILE_PATH}")
				SOURCE_GROUP(${REL_FILE_PATH} FILES ${FILE_NAME})
			ENDIF()
			#MESSAGE(STATUS "path: ${REL_FILE_PATH}===== file: ${FILE_NAME}")
		ENDFOREACH()
	ENDIF()

	ADD_LIBRARY(${LIBRARY_NAME} SHARED ${LIB_ALL_FILES})

	IF(UNIX)
		SET(LINK_LIBS "pthread")
		IF(WITH_GNUTLS)
			SET(LINK_LIBS "${LINK_LIBS} libgnutls.a")
		ENDIF()
		IF(WITH_JEMALLOC)
			SET(LINK_LIBS "${LINK_LIBS} jemalloc")
		ENDIF
	ELSEIF(WIN32)
		SET(LINK_LIBS "ws2_32.lib")
		IF(WITH_GNUTLS)
			SET(LINK_LIBS "${LINK_LIBS};libgnutls.dll.a")
		ENDIF()
		IF(WITH_JEMALLOC)
			IF(BUILD_DEBUG)
				SET(LINK_LIBS "${LINK_LIBS};jemallocd.lib")
			ELSE
				SET(LINK_LIBS "${LINK_LIBS};jemalloc.lib")
			ENDIF
		ENDIF
	ENDIF()
	TARGET_LINK_LIBRARIES(${LIBRARY_NAME} ${LINK_LIBS})

	IF(UNIX)
		SET(CMAKE_INSTALL_PREFIX /usr/local)
		FILE(GLOB_RECURSE HEADERS ${ROOT_DIR}/include/function/*.h)
		INSTALL(FILES ${HEADERS} DESTINATION include/function)
		INSTALL(DIRECTORY ${ROOT_DIR}/include/pump DESTINATION include)
		INSTALL(TARGETS ${LIBRARY_NAME}
				RUNTIME DESTINATION bin
				LIBRARY DESTINATION lib64
				ARCHIVE DESTINATION lib64)
	ENDIF()
ENDMACRO()